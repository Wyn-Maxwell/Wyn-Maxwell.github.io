<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Flutter Native混合开发（三）——Flutter与Native通讯</title>
    <url>/2020/05/07/Flutter%20Native%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94Flutter%E4%B8%8ENative%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<h1 id="Flutter-Native混合开发（三）——Flutter与Native通讯"><a href="#Flutter-Native混合开发（三）——Flutter与Native通讯" class="headerlink" title="Flutter Native混合开发（三）——Flutter与Native通讯"></a>Flutter Native混合开发（三）——Flutter与Native通讯</h1><h2 id="1、通讯机制简述"><a href="#1、通讯机制简述" class="headerlink" title="1、通讯机制简述"></a>1、通讯机制简述</h2><p>消息使用Channel(平台通道)在Native和Dart之间传递。</p>
<p>Flutter定义了三种不同类型的Channel：</p>
<ul>
<li>BasicMessageChannel：<br>用于传递字符串和半结构化的信息，持续通信，收到消息后可以回复此次消息。例如：Native将遍历到的文件信息陆续传递到Dart；Flutter将服务端获取的数据交给Native加工，Native处理完之后返回。</li>
<li>MethodChannel：<br>用于传递方法调用，一次性通信。例如：Flutter调用Native拍照。</li>
<li>EventChannel：<br>用于数据流的通信，持续通信，收到消息后无法回复此次消息，通常用于Native向Dart的通信。例如：手机电量变化，网络连接变化，陀螺仪，传感器等。</li>
</ul>
<p>这三种类型的Channel都是全双工通信，即A &lt;=&gt; B，Dart可以主动发送消息到Native端，并且Native接收消息后可以做出回应。同样地，Native端也可以主动发送消息到Dart端，Dart端接受消息后返回给Native端。<br><img src="https://img-blog.csdnimg.cn/20200507135953945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5bl90ZXN0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>下面说明MethodChannel实现的方式。</p>
<h2 id="2、Native到Dart的通信"><a href="#2、Native到Dart的通信" class="headerlink" title="2、Native到Dart的通信"></a>2、Native到Dart的通信</h2><p>Native端代码，需定义FlutterEngine，并且使用</p>
<pre><code>new MethodChannel(flutterEngine.getDartExecutor(), &quot;flutter.example.com/native&quot;).setMethodCallHandler(new MethodChannel.MethodCallHandler() {
    @Override
    public void onMethodCall(MethodCall call, MethodChannel.Result result) {
        if (call.method.equals(&quot;jumpSettings&quot;)) {
            try {
                // 实现功能
            } catch (Exception e){
                e.printStackTrace();
            }
        } else {
            result.notImplemented();
        }
    }
});</code></pre><p>Dart端代码，须使用async关键词，新建线程异步执行。</p>
<pre><code>static const platform = const MethodChannel(&quot;flutter.example.com/native&quot;);
…
async {
    await platform.invokeMethod(&quot;jumpSettings&quot;);
}</code></pre><h2 id="3、Dart到Native的通信"><a href="#3、Dart到Native的通信" class="headerlink" title="3、Dart到Native的通信"></a>3、Dart到Native的通信</h2><p>MethodChannel 来实现。</p>
<p>Dart端代码：</p>
<pre><code>String response;
try {
    //使用BasicMessageChannel向Native发送消息，并接受Native的回复
    response = await _methodChannelPlugin.invokeMethod(&apos;send&apos;, value);
} on PlatformException catch (e) {
    print(e);
}</code></pre><p>Native端代码：</p>
<pre><code>(void)initMethodChannel{
    self.methodChannel = [FlutterMethodChannel methodChannelWithName:@&quot;MethodChannelPlugin&quot; binaryMessenger:self.flutterViewController];
    __weak typeof(self)weakSelf = self;
    [self.methodChannel setMethodCallHandler:^(FlutterMethodCall * _Nonnull call, FlutterResult  _Nonnull result) {
        if ([@&quot;send&quot; isEqualToString:call.method]) {
            result([NSString stringWithFormat:@&quot;MethodChannelPlugin收到：%@&quot;,call.arguments]);//返回结果给Dart);
            [weakSelf sendShow:call.arguments];
        }
    }];
}</code></pre>]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter Native混合开发（一）——Flutter基础</title>
    <url>/2020/05/07/Flutter%20Native%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94Flutter%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Flutter-Native混合开发（一）——Flutter基础"><a href="#Flutter-Native混合开发（一）——Flutter基础" class="headerlink" title="Flutter Native混合开发（一）——Flutter基础"></a>Flutter Native混合开发（一）——Flutter基础</h1><h2 id="1、Flutter是什么"><a href="#1、Flutter是什么" class="headerlink" title="1、Flutter是什么"></a>1、Flutter是什么</h2><p>Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。Flutter工程使用极其容易上手的Dart代码编写，由于其独特的引擎，Flutter可以直接调用硬件，没有中间商赚差价的高效运行。</p>
<h2 id="2、Flutter的UI组件"><a href="#2、Flutter的UI组件" class="headerlink" title="2、Flutter的UI组件"></a>2、Flutter的UI组件</h2><p>如同安卓开发中，所有界面都由View组成，Flutter中一切UI都由Widget组成。由Widget的层层堆叠合成UI，Widget生命周期一直延续到setState()调用，UI更新时，此时Flutter框架会重绘整个页面的Widget。</p>
<p>一些Widget，如图片、文字等不会与用户交互的组件，继承自StatelessWidget类，他们在UI更新时会随着Widget树的重绘而重建，但是不会有状态信息的更新过程。如按钮和列表等需要信息更新和与用户交互的组件继承自StatefulWidget类，它包含一个跨生命周期的状态State类可以存储和更新信息。</p>
<p>虽然他们分属不同的类，但是在开发过程中我们仍然可以在组合过程中使用StatelessWidget充当父组件，有需要交互和更新的子组件再使用StatefulWidget，从而提高效率。<br><img src="https://img-blog.csdnimg.cn/20200507104249577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5bl90ZXN0,size_10,color_FFFFFF,t_70#pic_center" alt="UI组件结构图"></p>
<h2 id="3、Flutter框架"><a href="#3、Flutter框架" class="headerlink" title="3、Flutter框架"></a>3、Flutter框架</h2><p><img src="https://img-blog.csdnimg.cn/20200507104359596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5bl90ZXN0,size_16,color_FFFFFF,t_70#pic_center" alt="Flutter框架图"></p>
<p>该图显示了框架的上层，这个设计的目标是帮助你用更少的代码做更多的事情。例如，Material层是通过组合来自Widget层的基本Widget来构建的， 并且Widgets层本身是通过较低级对象渲染层构建的。</p>
<p>Framework层为构建应用程序提供了许多选项。选择一种自定义的方法来释放框架的全部表现力，或者使用构件层中的构建块，或混合搭配。 您可以实现Flutter提供的所有现成的Widget，或者使用Flutter团队用于构建框架的相同工具和技术创建您自己的定制Widget。</p>
<p>Flutter Engine是一个纯 C++实现的框架层，它包含了 Skia引擎（高性能渲染引擎）、Dart运行时、文字排版引擎等。它可以以 JIT、JIT Snapshot 或者 AOT(预先编译)的模式运行 Dart代码。AOT直接将Dart源码编译成了本地字节码，没有了解释执行的过程，提升执行性能。和Java显著不同的是Dart的线程(Isolate)是不共享内存的，各自的堆(Heap)和栈(Stack)都是隔离的，彼此之间通过消息通道来通信。所以，Dart不存在数据竞争和变量状态同步的问题，整个Flutter Framework Widget的渲染过程都运行在一个Isolate中，在代码调用 Dart UI库时，提供 Dart UI库中 Native Binding 实现。</p>
<h2 id="4、Flutter开发示例"><a href="#4、Flutter开发示例" class="headerlink" title="4、Flutter开发示例"></a>4、Flutter开发示例</h2><p>推荐入门文档：</p>
<ul>
<li><p>《编写您的第一个Flutter APP》</p>
<ul>
<li><a href="https://flutterchina.club/get-started/codelab/" target="_blank" rel="noopener">译文</a></li>
<li><a href="https://flutter.dev/docs/get-started/codelab" target="_blank" rel="noopener">原版</a></li>
</ul>
</li>
<li><p>《Flutter for Android开发者》</p>
<ul>
<li><a href="https://flutterchina.club/flutter-for-android/" target="_blank" rel="noopener">译文</a></li>
<li><a href="https://flutter.dev/docs/get-started/flutter-for/android-devs" target="_blank" rel="noopener">原版</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter Native混合开发（二）——混合开发</title>
    <url>/2020/05/07/Flutter%20Native%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="Flutter-Native混合开发（二）——混合开发"><a href="#Flutter-Native混合开发（二）——混合开发" class="headerlink" title="Flutter Native混合开发（二）——混合开发"></a>Flutter Native混合开发（二）——混合开发</h1><p>这一章节的主要目的是使Flutter和Android Native可以混合编程，并且可以互相独立开发，Nactive开发者不需要安装Flutter SDK也可以继续开发Native程序。</p>
<h2 id="1、推荐官方文档"><a href="#1、推荐官方文档" class="headerlink" title="1、推荐官方文档"></a>1、推荐官方文档</h2><p><a href="https://flutter.dev/docs/development/add-to-app" target="_blank" rel="noopener">《Add Flutter to existing app》</a></p>
<h2 id="2、创建Flutter-Module"><a href="#2、创建Flutter-Module" class="headerlink" title="2、创建Flutter Module"></a>2、创建Flutter Module</h2><p>将Flutter作为模块添加入安卓工程，需要Flutter项目为Flutter Module而不是Flutter Application。如果需要将Flutter Application作为模块添加，需要使用命令：</p>
<pre><code>cd some/path/
flutter create -t module --org com.example.my_flutter</code></pre><h2 id="3、打包生成AAR"><a href="#3、打包生成AAR" class="headerlink" title="3、打包生成AAR"></a>3、打包生成AAR</h2><p>使用AS菜单栏Build目录下的Flutter-&gt;Build AAR或者命令：</p>
<pre><code>cd some/path/my_flutter
flutter build aar</code></pre><p>生成成功后会提示下图使用指示，按照指示完成Native项目设置：<br><img src="https://img-blog.csdnimg.cn/20200507135224407.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d5bl90ZXN0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="4、Native项目设置"><a href="#4、Native项目设置" class="headerlink" title="4、Native项目设置"></a>4、Native项目设置</h2><p>由于Flutter基于Java 1.8及以上运行，须在App/Build.grade中添加兼容：</p>
<pre><code>android {
    //...
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}</code></pre><p>按照指示，将AAR设置为Maven本地仓库。建议Maven URL使用相对路径，也可设置为网络仓库，使用网络地址。</p>
<h2 id="5、添加Flutter开发的UI界面"><a href="#5、添加Flutter开发的UI界面" class="headerlink" title="5、添加Flutter开发的UI界面"></a>5、添加Flutter开发的UI界面</h2><p>使用FlutterActivity的build方法新建Intent跳转：</p>
<pre><code>myButton.addOnClickListener(new OnClickListener() {
    @Override
    public void onClick(View v) {
        startActivity(
        FlutterActivity
            .withNewEngine()
            .initialRoute(&quot;/my_route&quot;)
            .build(currentActivity)
        );
    }
});</code></pre><h2 id="6、优化页面加载速度"><a href="#6、优化页面加载速度" class="headerlink" title="6、优化页面加载速度"></a>6、优化页面加载速度</h2><p>将Flutter Engine（一个C++实现的SDK 包括Skia引擎、Dart运行时、文字排版引擎等）预先生成而且使其生命周期贯穿整个程序，当切换flutter页面时使用预先生成的引擎而不是新建，将会剩下大部分启动时间。这种效果在release情况下较为明显。</p>
<pre><code>public class MyApplication extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        flutterEngine = new FlutterEngine(this);
        flutterEngine.getDartExecutor().executeDartEntrypoint(DartEntrypoint.createDefault()
        );

        // Cache the FlutterEngine to be used by FlutterActivity.
        FlutterEngineCache
        .getInstance()
        .put(&quot;my_engine_id&quot;, flutterEngine);
    }
}

myButton.addOnClickListener(new OnClickListener() {
    @Override
    public void onClick(View v) {
        startActivity(
        FlutterActivity
            .withCachedEngine(&quot;my_engine_id&quot;)
            .build(currentActivity)
        );
    }
});</code></pre>]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux主机内网穿透</title>
    <url>/2020/05/07/Linux%E4%B8%BB%E6%9C%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h1 id="一、为什么写博客"><a href="#一、为什么写博客" class="headerlink" title="一、为什么写博客"></a>一、为什么写博客</h1><p>大佬们都有个人主页或者CSDN博客，本着计科学生的好奇精神，我也学习着，将近期的一个小项目写出来，望批评指正！</p>
<h1 id="二、文章正文"><a href="#二、文章正文" class="headerlink" title="二、文章正文"></a>二、文章正文</h1><p>不少同学会有这样的问题：在学校、公司或家里的个人电脑上搭建了个人网站或者配置了服务器，需要但是无法在其他地方访问到。这时可以利用另一台处于外网环境下的主机做一个转发，帮助外网访问到NAT后的内网</p>
<p>文章提供了亲测的两种简单而且稳定的工具，利用阿里云ECS配置内网穿透。</p>
<ul>
<li>任务一：外网访问内网主机SVN。</li>
<li>任务二：外网访问内网主机网站。</li>
</ul>
<h2 id="1、名词解释"><a href="#1、名词解释" class="headerlink" title="1、名词解释"></a>1、名词解释</h2><p>需要了解的相关知识：</p>
<ul>
<li><p><strong>NAT</strong>：“网络地址转换”，它是一种把内部私有网络地址（IP地址）翻译成合法网络IP地址的技术，如下图所示。因此我们可以认为，NAT在一定程度上，能够有效的解决公网地址不足的问题。</p>
</li>
<li><p><strong>内网穿透</strong>：内网穿透，即NAT穿透，网络连接时术语，计算机是局域网内时，外网与内网的计算机节点需要连接通信，有时就会出现不支持内网穿透。</p>
</li>
<li><p><strong>端口映射</strong>：将外网主机的IP地址的一个端口映射到内网中一台机器，提供相应的服务。当用户访问该IP的这个端口时，服务器自动将请求映射到对应局域网内部的机器上。端口映射就是解决该问题的一个方法。我们可以用拥有外网IP的主机做一个桥梁，让两个不能互相访问的主机通过外网主机建立一条访问隧道。</p>
</li>
</ul>
<h2 id="2、环境配置"><a href="#2、环境配置" class="headerlink" title="2、环境配置"></a>2、环境配置</h2><table>
<thead>
<tr>
<th>机器代号</th>
<th>机器位置</th>
<th>地址</th>
<th>账户</th>
<th>ssh/sshd 端口</th>
<th>是否需运行sshd</th>
</tr>
</thead>
<tbody><tr>
<td>阿里云ECS</td>
<td>位于公网</td>
<td>39.<strong><em>.</em></strong>.***</td>
<td>root</td>
<td>22</td>
<td>是</td>
</tr>
<tr>
<td>内网主机A</td>
<td>位于NAT之后</td>
<td>127.0.0.1</td>
<td>dage</td>
<td>22</td>
<td>是</td>
</tr>
<tr>
<td>客 户 端B</td>
<td>位于NAT之后</td>
<td>127.0.0.1</td>
<td>erdi</td>
<td>22</td>
<td>否</td>
</tr>
</tbody></table>
<p>ECS有公网IP，B 位于NAT 之后，也就是位于某个专用网内，只有私有地址，通过NAT路由器才能访问因特网的主机。现在想由A主动向B发起连接。由于B 在NAT 后端，无可用公网IP + 端口，所以A 无法穿透NAT。</p>
<h2 id="3、实现过程"><a href="#3、实现过程" class="headerlink" title="3、实现过程"></a>3、实现过程</h2><h3 id="方法一：ssh反向隧道"><a href="#方法一：ssh反向隧道" class="headerlink" title="方法一：ssh反向隧道"></a>方法一：ssh反向隧道</h3><p> SSH 端口转发的一种替代方案是 反向 SSH 隧道。反向 SSH 隧道的概念非常简单。使用这种方案，在你的受限的家庭网络之外你需要另一台主机（所谓的“中继主机”），你能从当前所在地通过 SSH 登录到它。你可以用有公网 IP 地址的VPS 实例配置一个中继主机。然后要做的就是从你的家庭网络服务器中建立一个到公网中继主机的永久 SSH 隧道。有了这个隧道，你就可以从中继主机中连接“回”家庭服务器（这就是为什么称之为 “反向” 隧道）。不管你在哪里、你的家庭网络中的 NAT 或 防火墙限制多么严格，只要你可以访问中继主机，你就可以连接到家庭服务器。</p>
<p>但是，这种反向连接（Reverse Connection）不稳定，可能随时断开，需要内网主机B再次向外网A发起连接，这时需要个“朋友”帮你在内网B主机执行这条命令。它就是autossh。</p>
<p>命令参数：</p>
<pre><code>autossh -M 5555 -NR 0.0.0.0:8889:localhost:3690 root@39.***.***.*** # 转发svn
autossh -M 5555 -NR 0.0.0.0:8888:localhost:8080 root@39.***.***.*** # 转发tomcat</code></pre><p>配置成功后需要输入系统账户密码。</p>
<p>为解决免密码自动断线重连，必须配置ssh密钥登陆。过程及常见问题见：<a href="https://blog.csdn.net/zengqiang1/article/details/52997885/" target="_blank" rel="noopener">https://blog.csdn.net/zengqiang1/article/details/52997885/</a></p>
<p>命令解析：</p>
<ul>
<li>M 5555</li>
</ul>
<p>负责通过5555端口监视连接状态，连接有问题时就会自动重连。</p>
<ul>
<li>0.0.0.0:8888:localhost:8080</li>
</ul>
<p>它定义了一个反向隧道，转发中继服务器8888端口的流量到Ubuntu服务器的8080号端口。</p>
<ul>
<li>N</li>
</ul>
<p>不执行远程指令</p>
<ul>
<li>R</li>
</ul>
<p>将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口</p>
<h3 id="方法二：earthworm-lcx"><a href="#方法二：earthworm-lcx" class="headerlink" title="方法二：earthworm/lcx"></a>方法二：earthworm/lcx</h3><p>lcx是一款强大的内网端口转发工具，用于将内网主机开放的内部端口映射到外网主机（有公网IP）任意端口。它是一款命令行工具，当然也可以在有权限的webshell下执行，正因如此lcx常被认为是一款黑客入侵工具，lcx在内网入侵渗透中起着重要的角色。lcx进行端口转发的原理就是使不同端口之间形成一个回路（如图）。它常用于外网连接内网3389端口。</p>
<p>Earthworm也是一套轻量便携且功能强大的网络穿透工具，基于标准C开发，具有socks5代理、端口转发和端口映射三大功能。因为它集成了lcx的功能，所以我们可以使用earthworm集成的lcx功能来实现端口映射。</p>
<p>命令参数：</p>
<pre><code>./ew/ew_for_linux -s lcx_slave -d 39.***.***.*** -e 80 -f 127.0.0.1 -g 3690  # 转发svn
./ew/ew_for_linux -s lcx_slave -d 39.***.***.*** -e 80 -f 127.0.0.1 -g 8080  # 转发网站tomcat</code></pre><p>命令解析：</p>
<ul>
<li>s<br>指定链路状态(ssocksd、rcsocks、rssocks、lcx_slave、lcx_listen、 lcx_tran)</li>
</ul>
<p><strong>ssocksd</strong>：正向socks5代理连接;<br><strong>rcsocks</strong>、<strong>rssocks</strong>：反向socks5代理连接;<br><strong>lcx_slave</strong>、<strong>lcx_listen</strong>：端口转发;<br><strong>lcx_tran</strong>：端口映射;</p>
<ul>
<li>l<br>开放指定端口监听;</li>
<li>d<br>指定转发或反弹的主机地址；</li>
<li>e<br>指定转发或反弹的主机端口；</li>
<li>f<br>指定连接或映射的主机地址；</li>
<li>g<br>指定连接或映射的主机端口；</li>
</ul>
<h2 id="4、待解决问题"><a href="#4、待解决问题" class="headerlink" title="4、待解决问题"></a>4、待解决问题</h2><p><strong>效果：</strong></p>
<ol>
<li>稳定性：两种方法短期内稳定，在测试过程中，两种方法都未曾因为自身问题断开连接。</li>
<li>网速：网速达到了阿里云的上行带宽1mbps大小。</li>
</ol>
<p><strong>不足：</strong></p>
<h3 id="1、内网穿透配置开机自动启动"><a href="#1、内网穿透配置开机自动启动" class="headerlink" title="1、内网穿透配置开机自动启动"></a>1、内网穿透配置开机自动启动</h3><p>Ubuntu开机之后会执行/etc/rc.local文件中的脚本，所以我们可以直接在/etc/rc.local中添加我们的命令即可。</p>
<h3 id="2、内网穿透后台运行"><a href="#2、内网穿透后台运行" class="headerlink" title="2、内网穿透后台运行"></a>2、内网穿透后台运行</h3><p>使用nohup命令提交作业。如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中：</p>
<pre><code>nohup command 2&gt;&amp;1 &amp;</code></pre><h3 id="3、网速较慢"><a href="#3、网速较慢" class="headerlink" title="3、网速较慢"></a>3、网速较慢</h3><p>解决方法:问题的瓶颈主要在于阿里云的上行带宽有限，因此使用起来体验较差。因此。。。要么换阿里云套餐，要么通过给主机A申请外网IP，彻底免去需要端口映射的状态。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>ssh配置：<a href="https://blog.csdn.net/lidongshengajz/article/details/73482908" target="_blank" rel="noopener">https://blog.csdn.net/lidongshengajz/article/details/73482908</a></p>
<p>ssh密钥配置：<a href="https://blog.csdn.net/zengqiang1/article/details/52997885/" target="_blank" rel="noopener">https://blog.csdn.net/zengqiang1/article/details/52997885/</a></p>
<p>earthworm配置：<a href="https://www.sohu.com/a/200547078_557054" target="_blank" rel="noopener">https://www.sohu.com/a/200547078_557054</a></p>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
